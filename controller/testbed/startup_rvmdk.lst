


ARM Macro Assembler    Page 1 


    1 00000000         ; <<< Use Configuration Wizard in Context Menu >>>
    2 00000000         ;*******************************************************
                       ***********************
    3 00000000         ;
    4 00000000         ; startup_rvmdk.S - Startup code for use with Keil's uVi
                       sion.
    5 00000000         ;
    6 00000000         ; Copyright (c) 2005-2012 Texas Instruments Incorporated
                       .  All rights reserved.
    7 00000000         ; Software License Agreement
    8 00000000         ; 
    9 00000000         ; Texas Instruments (TI) is supplying this software for 
                       use solely and
   10 00000000         ; exclusively on TI's microcontroller products. The soft
                       ware is owned by
   11 00000000         ; TI and/or its suppliers, and is protected under applic
                       able copyright
   12 00000000         ; laws. You may not combine this software with "viral" o
                       pen-source
   13 00000000         ; software in order to form a larger program.
   14 00000000         ; 
   15 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS" AND WITH ALL FAULTS.
                       
   16 00000000         ; NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, 
                       INCLUDING, BUT
   17 00000000         ; NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY 
                       AND FITNESS FOR
   18 00000000         ; A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL 
                       NOT, UNDER ANY
   19 00000000         ; CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR C
                       ONSEQUENTIAL
   20 00000000         ; DAMAGES, FOR ANY REASON WHATSOEVER.
   21 00000000         ; 
   22 00000000         ; This is part of revision 9453 of the EK-LM3S1968 Firmw
                       are Package.
   23 00000000         ;
   24 00000000         ;*******************************************************
                       ***********************
   25 00000000         
   26 00000000         ;*******************************************************
                       ***********************
   27 00000000         ;
   28 00000000         ; <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
   29 00000000         ;
   30 00000000         ;*******************************************************
                       ***********************
   31 00000000 00000100 
                       Stack   EQU              0x00000100
   32 00000000         
   33 00000000         ;*******************************************************
                       ***********************
   34 00000000         ;
   35 00000000         ; <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
   36 00000000         ;
   37 00000000         ;*******************************************************
                       ***********************
   38 00000000 00000000 
                       Heap    EQU              0x00000000
   39 00000000         



ARM Macro Assembler    Page 2 


   40 00000000         ;*******************************************************
                       ***********************
   41 00000000         ;
   42 00000000         ; Allocate space for the stack.
   43 00000000         ;
   44 00000000         ;*******************************************************
                       ***********************
   45 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   46 00000000         StackMem
   47 00000000                 SPACE            Stack
   48 00000100         __initial_sp
   49 00000100         
   50 00000100         ;*******************************************************
                       ***********************
   51 00000100         ;
   52 00000100         ; Allocate space for the heap.
   53 00000100         ;
   54 00000100         ;*******************************************************
                       ***********************
   55 00000100                 AREA             HEAP, NOINIT, READWRITE, ALIGN=
3
   56 00000000         __heap_base
   57 00000000         HeapMem
   58 00000000                 SPACE            Heap
   59 00000000         __heap_limit
   60 00000000         
   61 00000000         ;*******************************************************
                       ***********************
   62 00000000         ;
   63 00000000         ; Indicate that the code in this file preserves 8-byte a
                       lignment of the stack.
   64 00000000         ;
   65 00000000         ;*******************************************************
                       ***********************
   66 00000000                 PRESERVE8
   67 00000000         
   68 00000000         ;*******************************************************
                       ***********************
   69 00000000         ;
   70 00000000         ; Place code into the reset code section.
   71 00000000         ;
   72 00000000         ;*******************************************************
                       ***********************
   73 00000000                 AREA             RESET, CODE, READONLY
   74 00000000                 THUMB
   75 00000000         
   76 00000000         ;*******************************************************
                       ***********************
   77 00000000         ;
   78 00000000         ; External declaration for the interrupt handler used by
                        the application.
   79 00000000         ;
   80 00000000         ;*******************************************************
                       ***********************
   81 00000000                 EXTERN           UARTIntHandler
   82 00000000         
   83 00000000         ;*******************************************************
                       ***********************



ARM Macro Assembler    Page 3 


   84 00000000         ;
   85 00000000         ; The vector table.
   86 00000000         ;
   87 00000000         ;*******************************************************
                       ***********************
   88 00000000                 EXPORT           __Vectors
   89 00000000         __Vectors
   90 00000000 00000100        DCD              StackMem + Stack ; Top of Stack
                                                            
   91 00000004 00000000        DCD              Reset_Handler ; Reset Handler
   92 00000008 00000000        DCD              NmiSR       ; NMI Handler
   93 0000000C 00000000        DCD              FaultISR    ; Hard Fault Handle
                                                            r
   94 00000010 00000000        DCD              IntDefaultHandler ; The MPU fau
                                                            lt handler
   95 00000014 00000000        DCD              IntDefaultHandler ; The bus fau
                                                            lt handler
   96 00000018 00000000        DCD              IntDefaultHandler ; The usage f
                                                            ault handler
   97 0000001C 00000000        DCD              0           ; Reserved
   98 00000020 00000000        DCD              0           ; Reserved
   99 00000024 00000000        DCD              0           ; Reserved
  100 00000028 00000000        DCD              0           ; Reserved
  101 0000002C 00000000        DCD              IntDefaultHandler 
                                                            ; SVCall handler
  102 00000030 00000000        DCD              IntDefaultHandler ; Debug monit
                                                            or handler
  103 00000034 00000000        DCD              0           ; Reserved
  104 00000038 00000000        DCD              IntDefaultHandler ; The PendSV 
                                                            handler
  105 0000003C 00000000        DCD              IntDefaultHandler ; The SysTick
                                                             handler
  106 00000040 00000000        DCD              IntDefaultHandler ; GPIO Port A
                                                            
  107 00000044 00000000        DCD              IntDefaultHandler ; GPIO Port B
                                                            
  108 00000048 00000000        DCD              IntDefaultHandler ; GPIO Port C
                                                            
  109 0000004C 00000000        DCD              IntDefaultHandler ; GPIO Port D
                                                            
  110 00000050 00000000        DCD              IntDefaultHandler ; GPIO Port E
                                                            
  111 00000054 00000000        DCD              UARTIntHandler 
                                                            ; UART0 Rx and Tx
  112 00000058 00000000        DCD              IntDefaultHandler 
                                                            ; UART1 Rx and Tx
  113 0000005C 00000000        DCD              IntDefaultHandler 
                                                            ; SSI0 Rx and Tx
  114 00000060 00000000        DCD              IntDefaultHandler ; I2C0 Master
                                                             and Slave
  115 00000064 00000000        DCD              IntDefaultHandler ; PWM Fault
  116 00000068 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 0
  117 0000006C 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 1
  118 00000070 00000000        DCD              IntDefaultHandler 
                                                            ; PWM Generator 2
  119 00000074 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 0



ARM Macro Assembler    Page 4 


  120 00000078 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 0
  121 0000007C 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 1
  122 00000080 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 2
  123 00000084 00000000        DCD              IntDefaultHandler 
                                                            ; ADC Sequence 3
  124 00000088 00000000        DCD              IntDefaultHandler 
                                                            ; Watchdog timer
  125 0000008C 00000000        DCD              IntDefaultHandler ; Timer 0 sub
                                                            timer A
  126 00000090 00000000        DCD              IntDefaultHandler ; Timer 0 sub
                                                            timer B
  127 00000094 00000000        DCD              IntDefaultHandler ; Timer 1 sub
                                                            timer A
  128 00000098 00000000        DCD              IntDefaultHandler ; Timer 1 sub
                                                            timer B
  129 0000009C 00000000        DCD              IntDefaultHandler ; Timer 2 sub
                                                            timer A
  130 000000A0 00000000        DCD              IntDefaultHandler ; Timer 2 sub
                                                            timer B
  131 000000A4 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 0
  132 000000A8 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 1
  133 000000AC 00000000        DCD              IntDefaultHandler ; Analog Comp
                                                            arator 2
  134 000000B0 00000000        DCD              IntDefaultHandler ; System Cont
                                                            rol (PLL, OSC, BO)
  135 000000B4 00000000        DCD              IntDefaultHandler 
                                                            ; FLASH Control
  136 000000B8 00000000        DCD              IntDefaultHandler ; GPIO Port F
                                                            
  137 000000BC 00000000        DCD              IntDefaultHandler ; GPIO Port G
                                                            
  138 000000C0 00000000        DCD              IntDefaultHandler ; GPIO Port H
                                                            
  139 000000C4 00000000        DCD              IntDefaultHandler 
                                                            ; UART2 Rx and Tx
  140 000000C8 00000000        DCD              IntDefaultHandler 
                                                            ; SSI1 Rx and Tx
  141 000000CC 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer A
  142 000000D0 00000000        DCD              IntDefaultHandler ; Timer 3 sub
                                                            timer B
  143 000000D4 00000000        DCD              IntDefaultHandler ; I2C1 Master
                                                             and Slave
  144 000000D8 00000000        DCD              IntDefaultHandler ; Quadrature 
                                                            Encoder 1
  145 000000DC 00000000        DCD              IntDefaultHandler ; CAN0
  146 000000E0 00000000        DCD              IntDefaultHandler ; CAN1
  147 000000E4 00000000        DCD              IntDefaultHandler ; CAN2
  148 000000E8 00000000        DCD              IntDefaultHandler ; Ethernet
  149 000000EC 00000000        DCD              IntDefaultHandler ; Hibernate
  150 000000F0         
  151 000000F0         ;*******************************************************
                       ***********************
  152 000000F0         ;



ARM Macro Assembler    Page 5 


  153 000000F0         ; This is the code that gets called when the processor f
                       irst starts execution
  154 000000F0         ; following a reset event.
  155 000000F0         ;
  156 000000F0         ;*******************************************************
                       ***********************
  157 000000F0                 EXPORT           Reset_Handler
  158 000000F0         Reset_Handler
  159 000000F0         ;
  160 000000F0         ; Call the C library enty point that handles startup.  T
                       his will copy
  161 000000F0         ; the .data section initializers from flash to SRAM and 
                       zero fill the
  162 000000F0         ; .bss section.
  163 000000F0         ;
  164 000000F0                 IMPORT           __main
  165 000000F0 F7FF BFFE       B                __main
  166 000000F4         
  167 000000F4         ;*******************************************************
                       ***********************
  168 000000F4         ;
  169 000000F4         ; This is the code that gets called when the processor r
                       eceives a NMI.  This
  170 000000F4         ; simply enters an infinite loop, preserving the system 
                       state for examination
  171 000000F4         ; by a debugger.
  172 000000F4         ;
  173 000000F4         ;*******************************************************
                       ***********************
  174 000000F4         NmiSR
  175 000000F4 E7FE            B                NmiSR
  176 000000F6         
  177 000000F6         ;*******************************************************
                       ***********************
  178 000000F6         ;
  179 000000F6         ; This is the code that gets called when the processor r
                       eceives a fault
  180 000000F6         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  181 000000F6         ; for examination by a debugger.
  182 000000F6         ;
  183 000000F6         ;*******************************************************
                       ***********************
  184 000000F6         FaultISR
  185 000000F6 E7FE            B                FaultISR
  186 000000F8         
  187 000000F8         ;*******************************************************
                       ***********************
  188 000000F8         ;
  189 000000F8         ; This is the code that gets called when the processor r
                       eceives an unexpected
  190 000000F8         ; interrupt.  This simply enters an infinite loop, prese
                       rving the system state
  191 000000F8         ; for examination by a debugger.
  192 000000F8         ;
  193 000000F8         ;*******************************************************
                       ***********************
  194 000000F8         IntDefaultHandler
  195 000000F8 E7FE            B                IntDefaultHandler



ARM Macro Assembler    Page 6 


  196 000000FA         
  197 000000FA         ;*******************************************************
                       ***********************
  198 000000FA         ;
  199 000000FA         ; Make sure the end of this section is aligned.
  200 000000FA         ;
  201 000000FA         ;*******************************************************
                       ***********************
  202 000000FA 00 00           ALIGN
  203 000000FC         
  204 000000FC         ;*******************************************************
                       ***********************
  205 000000FC         ;
  206 000000FC         ; Some code in the normal code section for initializing 
                       the heap and stack.
  207 000000FC         ;
  208 000000FC         ;*******************************************************
                       ***********************
  209 000000FC                 AREA             |.text|, CODE, READONLY
  210 00000000         
  211 00000000         ;*******************************************************
                       ***********************
  212 00000000         ;
  213 00000000         ; Useful functions.
  214 00000000         ;
  215 00000000         ;*******************************************************
                       ***********************
  216 00000000                 EXPORT           DisableInterrupts
  217 00000000                 EXPORT           EnableInterrupts
  218 00000000                 EXPORT           StartCritical
  219 00000000                 EXPORT           EndCritical
  220 00000000                 EXPORT           WaitForInterrupt
  221 00000000         
  222 00000000         ;*********** DisableInterrupts ***************
  223 00000000         ; disable interrupts
  224 00000000         ; inputs:  none
  225 00000000         ; outputs: none
  226 00000000         DisableInterrupts
  227 00000000 B672            CPSID            I
  228 00000002 4770            BX               LR
  229 00000004         
  230 00000004         ;*********** EnableInterrupts ***************
  231 00000004         ; disable interrupts
  232 00000004         ; inputs:  none
  233 00000004         ; outputs: none
  234 00000004         EnableInterrupts
  235 00000004 B662            CPSIE            I
  236 00000006 4770            BX               LR
  237 00000008         
  238 00000008         ;*********** StartCritical ************************
  239 00000008         ; make a copy of previous I bit, disable interrupts
  240 00000008         ; inputs:  none
  241 00000008         ; outputs: previous I bit
  242 00000008         StartCritical
  243 00000008 F3EF 8010       MRS              R0, PRIMASK ; save old status
  244 0000000C B672            CPSID            I           ; mask all (except 
                                                            faults)
  245 0000000E 4770            BX               LR
  246 00000010         



ARM Macro Assembler    Page 7 


  247 00000010         ;*********** EndCritical ************************
  248 00000010         ; using the copy of previous I bit, restore I bit to pre
                       vious value
  249 00000010         ; inputs:  previous I bit
  250 00000010         ; outputs: none
  251 00000010         EndCritical
  252 00000010 F380 8810       MSR              PRIMASK, R0
  253 00000014 4770            BX               LR
  254 00000016         
  255 00000016         ;*********** WaitForInterrupt ************************
  256 00000016         ; go to low power mode while waiting for the next interr
                       upt
  257 00000016         ; inputs:  none
  258 00000016         ; outputs: none
  259 00000016         WaitForInterrupt
  260 00000016 BF30            WFI
  261 00000018 4770            BX               LR
  262 0000001A         
  263 0000001A         ;*******************************************************
                       ***********************
  264 0000001A         ;
  265 0000001A         ; The function expected of the C library startup code fo
                       r defining the stack
  266 0000001A         ; and heap memory locations.  For the C library version 
                       of the startup code,
  267 0000001A         ; provide this function so that the C library initializa
                       tion code can find out
  268 0000001A         ; the location of the stack and heap.
  269 0000001A         ;
  270 0000001A         ;*******************************************************
                       ***********************
  271 0000001A                 IF               :DEF: __MICROLIB
  272 0000001A                 EXPORT           __initial_sp
  273 0000001A                 EXPORT           __heap_base
  274 0000001A                 EXPORT           __heap_limit
  275 0000001A                 ELSE
  284                          ENDIF
  285 0000001A         
  286 0000001A         ;*******************************************************
                       ***********************
  287 0000001A         ;
  288 0000001A         ; Make sure the end of this section is aligned.
  289 0000001A         ;
  290 0000001A         ;*******************************************************
                       ***********************
  291 0000001A 00 00           ALIGN
  292 0000001C         
  293 0000001C         ;*******************************************************
                       ***********************
  294 0000001C         ;
  295 0000001C         ; Tell the assembler that we're done.
  296 0000001C         ;
  297 0000001C         ;*******************************************************
                       ***********************
  298 0000001C                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=startup_
rvmdk.d -ostartup_rvmdk.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -I
C:\Keil\ARM\Inc\Luminary --predefine="__MICROLIB SETA 1" --list=startup_rvmdk.l
st startup_rvmdk.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 45 in file startup_rvmdk.S
   Uses
      None
Comment: STACK unused
StackMem 00000000

Symbol: StackMem
   Definitions
      At line 46 in file startup_rvmdk.S
   Uses
      At line 90 in file startup_rvmdk.S
Comment: StackMem used once
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 48 in file startup_rvmdk.S
   Uses
      At line 272 in file startup_rvmdk.S
Comment: __initial_sp used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HEAP 00000000

Symbol: HEAP
   Definitions
      At line 55 in file startup_rvmdk.S
   Uses
      None
Comment: HEAP unused
HeapMem 00000000

Symbol: HeapMem
   Definitions
      At line 57 in file startup_rvmdk.S
   Uses
      None
Comment: HeapMem unused
__heap_base 00000000

Symbol: __heap_base
   Definitions
      At line 56 in file startup_rvmdk.S
   Uses
      At line 273 in file startup_rvmdk.S
Comment: __heap_base used once
__heap_limit 00000000

Symbol: __heap_limit
   Definitions
      At line 59 in file startup_rvmdk.S
   Uses
      At line 274 in file startup_rvmdk.S
Comment: __heap_limit used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FaultISR 000000F6

Symbol: FaultISR
   Definitions
      At line 184 in file startup_rvmdk.S
   Uses
      At line 93 in file startup_rvmdk.S
      At line 185 in file startup_rvmdk.S

IntDefaultHandler 000000F8

Symbol: IntDefaultHandler
   Definitions
      At line 194 in file startup_rvmdk.S
   Uses
      At line 94 in file startup_rvmdk.S
      At line 95 in file startup_rvmdk.S
      At line 96 in file startup_rvmdk.S
      At line 101 in file startup_rvmdk.S
      At line 102 in file startup_rvmdk.S
      At line 104 in file startup_rvmdk.S
      At line 105 in file startup_rvmdk.S
      At line 106 in file startup_rvmdk.S
      At line 107 in file startup_rvmdk.S
      At line 108 in file startup_rvmdk.S
      At line 109 in file startup_rvmdk.S
      At line 110 in file startup_rvmdk.S
      At line 112 in file startup_rvmdk.S
      At line 113 in file startup_rvmdk.S
      At line 114 in file startup_rvmdk.S
      At line 115 in file startup_rvmdk.S
      At line 116 in file startup_rvmdk.S
      At line 117 in file startup_rvmdk.S
      At line 118 in file startup_rvmdk.S
      At line 119 in file startup_rvmdk.S
      At line 120 in file startup_rvmdk.S
      At line 121 in file startup_rvmdk.S
      At line 122 in file startup_rvmdk.S
      At line 123 in file startup_rvmdk.S
      At line 124 in file startup_rvmdk.S
      At line 125 in file startup_rvmdk.S
      At line 126 in file startup_rvmdk.S
      At line 127 in file startup_rvmdk.S
      At line 128 in file startup_rvmdk.S
      At line 129 in file startup_rvmdk.S
      At line 130 in file startup_rvmdk.S
      At line 131 in file startup_rvmdk.S
      At line 132 in file startup_rvmdk.S
      At line 133 in file startup_rvmdk.S
      At line 134 in file startup_rvmdk.S
      At line 135 in file startup_rvmdk.S
      At line 136 in file startup_rvmdk.S
      At line 137 in file startup_rvmdk.S
      At line 138 in file startup_rvmdk.S
      At line 139 in file startup_rvmdk.S
      At line 140 in file startup_rvmdk.S
      At line 141 in file startup_rvmdk.S
      At line 142 in file startup_rvmdk.S
      At line 143 in file startup_rvmdk.S



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 144 in file startup_rvmdk.S
      At line 145 in file startup_rvmdk.S
      At line 146 in file startup_rvmdk.S
      At line 147 in file startup_rvmdk.S
      At line 148 in file startup_rvmdk.S
      At line 149 in file startup_rvmdk.S
      At line 195 in file startup_rvmdk.S

NmiSR 000000F4

Symbol: NmiSR
   Definitions
      At line 174 in file startup_rvmdk.S
   Uses
      At line 92 in file startup_rvmdk.S
      At line 175 in file startup_rvmdk.S

RESET 00000000

Symbol: RESET
   Definitions
      At line 73 in file startup_rvmdk.S
   Uses
      None
Comment: RESET unused
Reset_Handler 000000F0

Symbol: Reset_Handler
   Definitions
      At line 158 in file startup_rvmdk.S
   Uses
      At line 91 in file startup_rvmdk.S
      At line 157 in file startup_rvmdk.S

__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 89 in file startup_rvmdk.S
   Uses
      At line 88 in file startup_rvmdk.S
Comment: __Vectors used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 209 in file startup_rvmdk.S
   Uses
      None
Comment: .text unused
DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 226 in file startup_rvmdk.S
   Uses
      At line 216 in file startup_rvmdk.S
Comment: DisableInterrupts used once
EnableInterrupts 00000004

Symbol: EnableInterrupts
   Definitions
      At line 234 in file startup_rvmdk.S
   Uses
      At line 217 in file startup_rvmdk.S
Comment: EnableInterrupts used once
EndCritical 00000010

Symbol: EndCritical
   Definitions
      At line 251 in file startup_rvmdk.S
   Uses
      At line 219 in file startup_rvmdk.S
Comment: EndCritical used once
StartCritical 00000008

Symbol: StartCritical
   Definitions
      At line 242 in file startup_rvmdk.S
   Uses
      At line 218 in file startup_rvmdk.S
Comment: StartCritical used once
WaitForInterrupt 00000016

Symbol: WaitForInterrupt
   Definitions
      At line 259 in file startup_rvmdk.S
   Uses
      At line 220 in file startup_rvmdk.S
Comment: WaitForInterrupt used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Heap 00000000

Symbol: Heap
   Definitions
      At line 38 in file startup_rvmdk.S
   Uses
      At line 58 in file startup_rvmdk.S
Comment: Heap used once
Stack 00000100

Symbol: Stack
   Definitions
      At line 31 in file startup_rvmdk.S
   Uses
      At line 47 in file startup_rvmdk.S
      At line 90 in file startup_rvmdk.S

2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

UARTIntHandler 00000000

Symbol: UARTIntHandler
   Definitions
      At line 81 in file startup_rvmdk.S
   Uses
      At line 111 in file startup_rvmdk.S
Comment: UARTIntHandler used once
__main 00000000

Symbol: __main
   Definitions
      At line 164 in file startup_rvmdk.S
   Uses
      At line 165 in file startup_rvmdk.S
Comment: __main used once
2 symbols
354 symbols in table
